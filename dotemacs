;;; UI Customization
(tool-bar-mode 0)

;; Proxy
(setq url-proxy-services
      '(("no_proxy" . "^\\(localhost\\|10\\..*\\|127\\..*\\)")
	("http" . "nwsUSmeri9888-zscaler-comm.utccgl.com:80")
	("https" . "nwsUSmeri9888-zscaler-comm.utccgl.com:80")))

;; Packages
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

					; Theme
(load-theme 'exotica t)
(set-frame-font "Consolas-16")

;;; Paths
(add-to-list 'load-path (expand-file-name "~/dotemacs/elisp"))
(require 'exec-path-from-shell)
(setq exec-path-from-shell-check-startup-files nil)
(exec-path-from-shell-initialize)

;;;
;;; Editing Functions
;;;
(require 'basic-edit-toolkit)

;;;
;;; Programming
;;;
(require 'editorconfig)
(editorconfig-mode 1)

(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)

;;
;; EVIL
;;
(require 'evil)
(evil-mode 1)

(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-leader ",")

(setq evil-shift-width 4)
(setq auto-indent t)

(evil-define-key 'normal 'global "s" (kbd "x p h"))
(evil-define-key 'normal 'global (kbd "M-k") 'evil-window-up)
(evil-define-key 'normal 'global (kbd "M-j") 'evil-window-down)
(evil-define-key 'normal 'global (kbd "M-h") 'evil-window-left)
(evil-define-key 'normal 'global (kbd "M-l") 'evil-window-right)
(evil-define-key 'normal 'global (kbd "C-o") 'open-newline-above)
(evil-define-key 'normal 'global (kbd "C-k") 'move-text-up)
(evil-define-key 'normal 'global (kbd "C-j") 'move-text-down)
;; This doesn't work more than once. Cursor in wrong place. TODO
(evil-define-key 'visual 'global (kbd "C-k") 'move-text-up)
(evil-define-key 'visual 'global (kbd "C-j") 'move-text-down)

(evil-leader/set-key
  "b" 'switch-to-buffer
  "ci" 'evilnc-comment-or-uncomment-lines
  "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
  "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
  "cc" 'evilnc-copy-and-comment-lines
  "cp" 'evilnc-comment-or-uncomment-paragraphs
  "cr" 'comment-or-uncomment-region
  "cv" 'evilnc-toggle-invert-comment-line-by-line
  "."  'evilnc-copy-and-comment-operator
  "\\" 'evilnc-comment-operator ; if you prefer backslash key
  "e" 'pp-eval-last-sexp
  "f" 'flyspell-buffer
  "k" 'kill-buffer
  "w" (kbd ": % s / \\ s \\ + $ / / RET"))


;;; Editor settings
(setq c-basic-offset 4) ; indents 4 chars
(setq tab-width 4)          ; and 4 char wide for TAB
(setq column-number-mode t)
(setq-default indent-tabs-mode nil)
(setq exec-path (append exec-path '("/usr/local/bin")))
(setq case-fold-search t) ; case-insensitive search
(turn-on-font-lock)
(setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
(set-language-environment 'utf-8)
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-selection-coding-system
(if (eq system-type 'windows-nt)
    'utf-16-le  ;; https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows
    'utf-8))
(prefer-coding-system 'utf-8)
;;
;; Javascript
;;
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
(require 'js2-refactor)
(add-hook 'js2-mode-hook #'js2-refactor-mode)
; Use eslint instead of jshint
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint json-jsonlist)))

;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
;; unbind it.
(define-key js-mode-map (kbd "M-.") nil)
;; This command is very similar to killing in paredit: It kills up to the end of the line,
;; but always keeping the AST valid.
(define-key js2-mode-map (kbd "C-k") #'js2r-kill)

(require 'indium)
(add-hook 'js2-mode-hook #'indium-interaction-mode)

;; After js2 has parsed a js file, we look for jslint globals decl comment ("/* global Fred, _, Harry */") and
;; add any symbols to a buffer-local var of acceptable global vars
;; Note that we also support the "symbol: true" way of specifying names via a hack (remove any ":true"
;; to make it look like a plain decl, and any ':false' are left behind so they'll effectively be ignored as
;; you can;t have a symbol called "someName:false"
(add-hook 'js2-post-parse-callbacks
	    (lambda ()
	    (when (> (buffer-size) 0)
		(let ((btext (replace-regexp-in-string
			    ": *true" " "
			    (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
		(mapc (apply-partially 'add-to-list 'js2-additional-externs)
			(split-string
			(if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
			" *, *" t))
		))))
;;
;; Clojure
;;
					; clojure-mode
(require 'clojure-mode)
(require 'which-key)
(add-hook 'clojure-mode-hook #'cider-mode)
(add-hook 'clojure-mode-hook #'turn-on-eldoc-mode)
(add-hook 'clojure-mode-hook #'which-key-mode)
					; cider
(require 'cider)
(add-hook 'cider-mode-hook #'eldoc-mode)
(add-to-list 'same-window-buffer-names "<em>nrepl</em>")
(eval-after-load "cider"
  '(define-key cider-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc)) ; C-c C-d to show doc
(setq nrepl-hide-special-buffers t)
(setq cider-lein-command "/Users/bholm1/bin/lein")
; (setq cljr-inject-dependencies-at-jack-in nil)
					; misc
(require 'rainbow-delimiters)
(show-paren-mode 1)

(setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#eaeaea" "#d54e53" "DarkOliveGreen3" "#e7c547" "DeepSkyBlue1" "#c397d8" "#70c0b1" "#181a26"))
 '(custom-safe-themes
   (quote
    ("0bff60fb779498e69ea705825a2ca1a5497a4fccef93bf3275705c2d27528f2f" "4980e5ddaae985e4bae004280bd343721271ebb28f22b3e3b2427443e748cd3f" "28ec8ccf6190f6a73812df9bc91df54ce1d6132f18b4c8fcc85d45298569eb53" default)))
 '(fci-rule-color "#14151E")
 '(package-selected-packages
   (quote
    (move-text evil-better-visual-line evil-leader editorconfig editorconfig-custom-majormode editorconfig-domain-specific editorconfig-generate which-key json-mode flycheck-clojure flycheck flymake-eslint company-tern exec-path-from-shell exotica-theme js-auto-format-mode js-comint js-format eslint-fix js2-refactor npm-mode nodejs-repl a markdown-mode markdown-toc erlang indium olivetti noctilux-theme rainbow-delimiters rainbow-identifiers evil evil-matchit evil-nerd-commenter evil-numbers evil-search-highlight-persist evil-surround clj-refactor cider clojure-mode afternoon-theme)))
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#d54e53")
     (40 . "goldenrod")
     (60 . "#e7c547")
     (80 . "DarkOliveGreen3")
     (100 . "#70c0b1")
     (120 . "DeepSkyBlue1")
     (140 . "#c397d8")
     (160 . "#d54e53")
     (180 . "goldenrod")
     (200 . "#e7c547")
     (220 . "DarkOliveGreen3")
     (240 . "#70c0b1")
     (260 . "DeepSkyBlue1")
     (280 . "#c397d8")
     (300 . "#d54e53")
     (320 . "goldenrod")
     (340 . "#e7c547")
     (360 . "DarkOliveGreen3"))))
 '(vc-annotate-very-old-color nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
